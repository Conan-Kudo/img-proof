= Contributing to ipa

=== Installation

[source]
----
git clone https://github.com/SUSE/ipa.git
cd ipa

# Activate virtual Environment then install
# ipa and dev dependences in editable mode
pip install -e .[dev]
----

ipa is now installed in the active virtual environment in development
mode.

=== Dev Requirements

* bumpversion
* pip>=7.0.0

=== Testing Requirements

* coverage
* flake8
* mock
* pytest-cov
* vcrpy

=== Versions & Releases

*ipa* adheres to Semantic versioning; see http://semver.org/ for details.

link:https://pypi.python.org/pypi/bumpversion/[bumpversion] is used
for release version management, and is configured in `setup.cfg`:

----
bumpversion major|minor|patch
git push && git push --tags
----

=== Running the tests

All tests should pass and test coverage should remain above 90%.

The tests and coverage can be run directly via Pytest.

----
pytest --cov=ipa
----

They can also be run with tox integration which runs flake8 as well:

=== Testing with tox

==== Requirements

* tox
* tox-pyenv (testing multiple Python envs)

==== Tox installation

pip install .[tox]

==== Setup pyenv

See the link:https://github.com/pyenv/pyenv#installation[pyenv doc] for more
info.

==== Run tox

----
tox (test all versions)

# or
tox -e py{version}
tox -e py36
----

=== Code Style

Source should pass flake8 and pep8 standards.

----
flake8 ipa
----

== ipa Source Overview

=== CLI

 ipa test

The test subcommand invokes a test suite on an image in the chosen
public cloud environment. The image id, tests and provider are required
arguments. See below for options:

----
Example: ipa test --ssh-private-key /path/to/key -d SLES Azure test_image
----

 ipa results

The results subcommand displays the test results information. The path
to the results xml is required.

----
Example: ipa results -v
----

The default location for results files is ~/ipa/results/ and the files
are encoded with the timestamp of execution. For example,
the results for an image test in ec2 would be found at
~/ipa/results/ec2/{imageId}/{instanceId}/{datetime}.results.

----
Example results directory:

ec2/:
  ami-43243232/:
    i-3432r4324y3t2/:
      {datetime}.results
    i-432423j3j2432/:
      {datetime}.results
----

 ipa list

The list subcommand displays the available tests.

----
Examples: ipa list
----

The list subcommand will return a list of test files in the default test
directories. The verbose option will return a list of all available
tests in all test files.

----
Example output:

$ ipa list -v

test_broken::test_broken
test_image::test_image
test_sles::test_sles
test_sles::test_sles_1
test_sles::test_sles_2
----

=== API

The API used by CLI or used independently, is structured with a base
class in ipa_provider.py. This contains the functionality required to run tests
and collect the test results.

[source,python]
.ipa_provider.py
----
class IpaProvider(object):
...
----

The base class is extended for each provider to implement specific
methods for manipulating the test instance.

[source,python]
.ipa_{cloud-provider}.py
----
class {CloudProvider}Provider(IpaProvider):
...
----

The controller (ipa_controller.py) provides methods for testing an image,
displaying available tests and/or test files and displaying results of a
previous test run. These methods provide a layer between the CLI and the
API. They also provide an entry point for using *ipa* directly from code.

[source,python]
.ipa_controller.py
----
def test_image(self):
    """Creates a cloud provider instance and initiates testing."""

def list_tests(self):
    """Returns a list of test files and/or tests."""

def collect_results(self):
    """Returns the result (pass/fail) or verbose results."""
----

=== Tests

Tests are developed using the link:https://testinfra.readthedocs.io[Testinfra]
package. The package extends Pytest and provides a framework for writing Python
tests to verify the actual state of systems. The default locations for test
files are locally in ~/ipa/tests/ and centralized in /usr/share/ipa/tests.

==== Writing Tests

Tests can be organized in a directory structure:

----
~/ipa/tests/:
  conftest.py           # Pytest custom modules and config goes here
  test-image.py         # Generic tests for all images
  leap-leap-422:
    test-leap-422.py        # Generic leap tests
    EC2:
      test-leap-422-ec2.py  # Specific EC2 tests for leap images
    GCE:
    ...
  SLES12SP1:
    test-sles-12-sp1.py
    test-sles-12-sp1-sap.py    # Can import SLES12SP1 tests
    EC2:
      test-sles-12-sp1-sap-ec2.py
    ...
  SUMA3:
    ...
----

A test file can inherit tests by importing another file. For example the
test-leap-422.py file would import test-image.py to include all generic
image tests. An example for this structure would be similar to the files
below:

[source,python]
.test-leap-422-ec2.py
----
import pytest
from test-leap-422 import *           # Import all generic leap tests

@pytest.mark.parametrize("name", [
    ("cloud-init"),
    ("amazon-ssm-agent"),
])
def test-services-running-enabled(Service, name):
    service = Service(name)
    assert service.is-running
    assert service.is-enabled
----

The file which contains specific leap 42.2 tests for EC2 images inherits
all tests specific to the leap 42.2 image.

[source,python]
.test-leap-422.py
----
import pytest
from test-image import *          # Import all generic image tests

@pytest.mark.parametrize("repo,name", [
    ("repo-oss", "openSUSE-Leap-42.1-Oss"),
    ("repo-non-oss", "openSUSE-Leap-42.1-Non-Oss"),
])
def test-repos(CheckRepo, repo, name):
    assert CheckRepo(repo, name)
----

The leap 42.2 test file inherits all generic image tests.

[source,python]
.test-image.py
----
import pytest

@pytest.mark.parametrize("name,version", [
    ("python-virtualenv", "13"),
    ("python", "2.7"),
])
def test-packages(Package, name, version):
    assert Package(name).is-installed
    assert Package(name).version.startswith(version)


def test-echo(Echo):
    assert Echo("Hello") == 'Hello'
----

Thus when invoking the test-leap-422-ec2.py file the following tests are
run:

----
$ ipa test test-leap-422-ec2 --ssh-private-key key-file --ssh-user ec2-user

> PASSED tests=7|pass=7|fail=0|error=0
----

All 7 tests from the three test files are ran when testing the 42.2 EC2
image.

==== Test invocation

To invoke the entire test suite for a Leap image in EC2 the
test-leap-42.2-ec2.py target would be used.

To invoke a specific test the Pytest conventions can be used:

----
test-leap-422-ec2::test-services-running-enabled
----

To run only one parameterized test append ids and use [local-ID]:

[source,python]
----
@pytest.mark.parametrize("name", [
    ("cloud-init"),
    ("amazon-ssm-agent"),
], ids=['ci', 'ssm'])


test-leap-422-ec2::test-services-running-enabled[local-ssm]
----

==== Failures

By default all tests will run even with failure. Using the `--early-exit` option
will halt test invocation at first failure.

link:http://pytest.org/dev/example/simple.html#incremental-testing-test-steps[Incremental test classes]
can be used to cause all subsequent tests to fail if the prev fails. To prevent
expected failures.

==== Custom Test Modules

Modules are provided for checking standard things such as packages,
services, files, dirs etc. Modules can be easily written and extended
from to provide custom modules such as CheckRepo. Any custom modules
could be written in conftest.py in the same dir and would be resolved by
Pytest automagically:

[source,python]
.conftest.py
----
import pytest

@pytest.fixture()
def Echo(Command):
    def f(arg):
        return Command.check-output("echo %s", arg)
    return f


@pytest.fixture()
def CheckRepo(File):
    def f(repo, name):
        repo = File('/etc/zypp/repos.d/' + repo + '.repo')
        tests = [repo.exists,
                 repo.contains('enabled=1'),
                 repo.contains('name=%s' % name)]
        return all(tests)
    return f
----
